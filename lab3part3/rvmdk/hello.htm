<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\hello.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\hello.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Feb 11 17:00:10 2015
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART1IntHandler &rArr; drawChar &rArr; fillRect &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1a]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SSIDataPut</a><BR>
 <LI><a href="#[1e]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">UARTCharPut</a><BR>
 <LI><a href="#[27]">UARTCharGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">UARTCharGet</a><BR>
 <LI><a href="#[b]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysCtlDelay</a><BR>
 <LI><a href="#[2b]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 112 times from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">SysTick_Handler</a> from oled_display_functions.o(i.SysTick_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">UART1IntHandler</a> from oled_display_functions.o(i.UART1IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">main</a> from oled_display_functions.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[45]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[46]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[47]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[48]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[49]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4c]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[19]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[4d]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4e]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[22]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[43]"></a>GPIOIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
</UL>

<P><STRONG><a name="[3a]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
</UL>

<P><STRONG><a name="[f]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>

<P><STRONG><a name="[15]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsole
</UL>

<P><STRONG><a name="[d]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
</UL>

<P><STRONG><a name="[10]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
</UL>

<P><STRONG><a name="[11]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
</UL>

<P><STRONG><a name="[12]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsole
</UL>

<P><STRONG><a name="[3c]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
</UL>

<P><STRONG><a name="[13]"></a>InitConsole</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, oled_display_functions.o(i.InitConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitConsole &rArr; UARTStdioConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
</UL>

<P><STRONG><a name="[18]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
</UL>

<P><STRONG><a name="[44]"></a>SSIBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
</UL>

<P><STRONG><a name="[40]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
</UL>

<P><STRONG><a name="[1a]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
</UL>

<P><STRONG><a name="[41]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
</UL>

<P><STRONG><a name="[1b]"></a>SendStr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, oled_display_functions.o(i.SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendStr &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSpaceAvail
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>SysCtlClockGet</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
</UL>

<P><STRONG><a name="[21]"></a>SysCtlClockSet</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
</UL>

<P><STRONG><a name="[14]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsole
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[2c]"></a>SysCtlPeripheralPresent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralPresent))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[3d]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
</UL>

<P><STRONG><a name="[24]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[23]"></a>SysTickValueGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.SysTickValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4]"></a>SysTick_Handler</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, oled_display_functions.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UART1IntHandler</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, oled_display_functions.o(i.UART1IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UART1IntHandler &rArr; drawChar &rArr; fillRect &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UARTCharGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharGet))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[1e]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>

<P><STRONG><a name="[2a]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[16]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsole
</UL>

<P><STRONG><a name="[2b]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[2d]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[26]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[1c]"></a>UARTIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>

<P><STRONG><a name="[20]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>

<P><STRONG><a name="[25]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[1f]"></a>UARTSpaceAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTSpaceAvail))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
</UL>

<P><STRONG><a name="[17]"></a>UARTStdioConfig</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPresent
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsole
</UL>

<P><STRONG><a name="[1d]"></a>UARTprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[2e]"></a>UARTvprintf</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, uartstdio.o(i.UARTvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[2f]"></a>UARTwrite</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>

<P><STRONG><a name="[51]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[52]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[53]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[30]"></a>begin</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, oled_display_functions.o(i.begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = begin &rArr; writeCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>configureUART1</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, oled_display_functions.o(i.configureUART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = configureUART1 &rArr; GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>drawChar</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, oled_display_functions.o(i.drawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = drawChar &rArr; fillRect &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[35]"></a>drawPixel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oled_display_functions.o(i.drawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drawPixel &rArr; goTo &rArr; writeCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goTo
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar
</UL>

<P><STRONG><a name="[29]"></a>fillRect</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, oled_display_functions.o(i.fillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fillRect &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawFillRect
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillScreen
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[38]"></a>fillScreen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oled_display_functions.o(i.fillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fillScreen &rArr; fillRect &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>goTo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled_display_functions.o(i.goTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = goTo &rArr; writeCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPixel
</UL>

<P><STRONG><a name="[39]"></a>initializeIRInterrupts</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, oled_display_functions.o(i.initializeIRInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initializeIRInterrupts &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>initializePins</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, oled_display_functions.o(i.initializePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = initializePins &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>main</STRONG> (Thumb, 1042 bytes, Stack size 40 bytes, oled_display_functions.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; drawChar &rArr; fillRect &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntDisable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawFastHLine
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePins
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeIRInterrupts
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillScreen
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureUART1
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConsole
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[42]"></a>rawFastHLine</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, oled_display_functions.o(i.rawFastHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rawFastHLine &rArr; writeCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>rawFillRect</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, oled_display_functions.o(i.rawFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rawFillRect &rArr; writeCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRect
</UL>

<P><STRONG><a name="[31]"></a>writeCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, oled_display_functions.o(i.writeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawFillRect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawFastHLine
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goTo
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin
</UL>

<P><STRONG><a name="[32]"></a>writeData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled_display_functions.o(i.writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawFillRect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawFastHLine
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goTo
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPixel
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
